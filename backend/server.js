// backend/server.js
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');
const multer = require('multer');
const fs = require('fs');

// –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
const UPLOADS_DIR = path.join(__dirname, '../uploads');
if (!fs.existsSync(UPLOADS_DIR)) fs.mkdirSync(UPLOADS_DIR, { recursive: true });

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
require('./db/database'); // –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const { initDatabase } = require('./db/init');
initDatabase(); // —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, UPLOADS_DIR);
  },
  filename: (req, file, cb) => {
    const ext = path.extname(file.originalname);
    const name = Date.now() + '-' + Math.round(Math.random() * 1E9) + ext;
    cb(null, name);
  }
});

const upload = multer({ storage });

// –ú–æ–¥–µ–ª–∏
const User = require('./models/User');
const Chat = require('./models/Chat');
const Message = require('./models/Message');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: { origin: "*" }
});

app.use(cors({
  origin: "https://nee-chat.cloudpub.ru", // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
  credentials: true // –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫—É–∫–∏
}));
app.use(express.json());
app.use(express.static(path.join(__dirname, '../frontend')));

// –ü–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Express
app.use('/uploads', express.static(path.join(__dirname, '../uploads')));

// JWT secret
const JWT_SECRET = 'mini_messenger_secret_2025';

// Middleware: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
function auth(req, res, next) {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    req.userId = decoded.id;
    next();
  } catch (e) {
    res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }
}


// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/api/register', async (req, res) => {
  try {
    const { username, password, name } = req.body;
    const hashed = await bcrypt.hash(password, 10);
    const password_hash = await bcrypt.hash(password, 10);
    const user = await User.create({ username, password_hash, name });
    await Chat.addMember(1, user.id); // –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç
    const personalChat = await Chat.create({ name: `–ß–∞—Ç ${name}`, is_group: false });
    await Chat.addMember(personalChat.id, user.id);
    const token = jwt.sign({ id: user.id }, JWT_SECRET, { expiresIn: '7d' });
    res.json({ token, user: { id: user.id, name: user.name, avatar: user.avatar } });
  } catch (e) {
    res.status(400).json({ error: e.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
  }
});

// –í—Ö–æ–¥
app.post('/api/login', async (req, res) => {
  try {
    const { username, password } = req.body;
    const user = await User.findByUsername(username);
    if (!user || !(await bcrypt.compare(password, user.password_hash))) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }
    const token = jwt.sign({ id: user.id }, JWT_SECRET, { expiresIn: '7d' });
    res.json({ token, user: { id: user.id, name: user.name, avatar: user.avatar } });
  } catch (e) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞' });
  }
});

// –ü—Ä–æ—Ñ–∏–ª—å
app.get('/api/profile', auth, async (req, res) => {
  const user = await User.findById(req.userId);
  res.json(user);
});

app.post('/api/profile', auth, async (req, res) => {
  const { name, avatar } = req.body;
  const updated = await User.update(req.userId, { name, avatar });
  res.json(updated);
});

// –£–¥–∞–ª–∏—Ç—å —á–∞—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏ –Ω–µ "–û–±—â–∏–π —á–∞—Ç")
// –£–¥–∞–ª–∏—Ç—å —á–∞—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏ –Ω–µ "–û–±—â–∏–π —á–∞—Ç")
app.delete('/api/chats/:id', auth, async (req, res) => {
  const chatId = req.params.id;
  const userId = req.userId;
  const db = require('./db/database');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –∏ –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const chat = await new Promise((resolve, reject) => {
      db.get(`
        SELECT c.id, c.name, c.is_group
        FROM chats c
        JOIN chat_members cm ON c.id = cm.chat_id
        WHERE c.id = ? AND cm.user_id = ?
      `, [chatId, userId], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });

    if (!chat) return res.status(404).json({ error: '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    // üîπ –ó–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª—è—Ç—å "–û–±—â–∏–π —á–∞—Ç"
    if (chat.name === '–û–±—â–∏–π —á–∞—Ç') {
      return res.status(403).json({ error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –æ–±—â–∏–π —á–∞—Ç' });
    }

    if (chat.is_group) {
      return res.status(400).json({ error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã' });
    }

    // üîπ –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const members = await new Promise((resolve, reject) => {
      db.all(`
        SELECT user_id FROM chat_members WHERE chat_id = ?
      `, [chatId], (err, rows) => {
        if (err) reject(err);
        else resolve(rows.map(r => r.user_id));
      });
    });

    // –£–¥–∞–ª—è–µ–º —á–∞—Ç –∏ –≤—Å—ë —Å–≤—è–∑–∞–Ω–Ω–æ–µ
    await new Promise((resolve, reject) => {
      db.run('DELETE FROM chat_members WHERE chat_id = ?', [chatId], (err) => {
        if (err) reject(err);
        else resolve();
      });
    });
    await new Promise((resolve, reject) => {
      db.run('DELETE FROM messages WHERE chat_id = ?', [chatId], (err) => {
        if (err) reject(err);
        else resolve();
      });
    });
    await new Promise((resolve, reject) => {
      db.run('DELETE FROM chats WHERE id = ?', [chatId], (err) => {
        if (err) reject(err);
        else resolve();
      });
    });

    // üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞ (–∫—Ä–æ–º–µ —É–¥–∞–ª–∏–≤—à–µ–≥–æ)
    members.forEach(memberId => {
      if (memberId !== userId) {
        io.to(`user_${memberId}`).emit('chatDeleted', { chatId });
      }
    });

    res.json({ success: true });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞' });
  }
});

  app.get('/api/chats/unread-counts', auth, async (req, res) => {
    const userId = req.userId;
    const db = require('./db/database');

    try {
      const counts = await new Promise((resolve, reject) => {
        db.all(`
          SELECT 
            c.id AS chat_id,
            COUNT(m.id) AS unread_count
          FROM chats c
          JOIN chat_members cm ON c.id = cm.chat_id
          LEFT JOIN user_chat_read_status rcs ON c.id = rcs.chat_id AND rcs.user_id = ?
          LEFT JOIN messages m ON m.chat_id = c.id
            AND (rcs.last_read_message_id IS NULL OR m.id > rcs.last_read_message_id)
          WHERE cm.user_id = ?
          GROUP BY c.id
        `, [userId, userId], (err, rows) => {
          if (err) reject(err);
          else resolve(rows);
        });
      });

      const result = {};
      counts.forEach(row => {
        result[row.chat_id] = row.unread_count;
      });

      res.json(result);
    } catch (e) {
      console.error(e);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—á—ë—Ç—á–∏–∫–æ–≤' });
    }
  });
  
app.post('/api/chats/:id/mark-as-read', auth, async (req, res) => {
  const chatId = req.params.id;
  const userId = req.userId;
  const db = require('./db/database');

  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
    const lastMsg = await new Promise((resolve, reject) => {
      db.get('SELECT id FROM messages WHERE chat_id = ? ORDER BY id DESC LIMIT 1', [chatId], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });

    if (!lastMsg) {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤–∏–º NULL
      await new Promise((resolve, reject) => {
        db.run(`
          INSERT OR REPLACE INTO user_chat_read_status (user_id, chat_id, last_read_message_id)
          VALUES (?, ?, NULL)
        `, [userId, chatId], (err) => {
          if (err) reject(err);
          else resolve();
        });
      });
    } else {
      await new Promise((resolve, reject) => {
        db.run(`
          INSERT OR REPLACE INTO user_chat_read_status (user_id, chat_id, last_read_message_id)
          VALUES (?, ?, ?)
        `, [userId, chatId, lastMsg.id], (err) => {
          if (err) reject(err);
          else resolve();
        });
      });
    }

    res.json({ success: true });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
app.get('/api/chats/:chatId/members', auth, async (req, res) => {
  const chatId = req.params.chatId;
  const db = require('./db/database');
  try {
    const members = await new Promise((resolve, reject) => {
      db.all(`
        SELECT u.id, u.username, u.name, u.avatar
        FROM users u
        JOIN chat_members cm ON u.id = cm.user_id
        WHERE cm.chat_id = ?
      `, [chatId], (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });
    res.json(members);
  } catch (e) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' });
  }
});

// –ß–∞—Ç—ã
app.get('/api/chats', auth, async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const db = require('./db/database');
    const chatRows = await new Promise((resolve, reject) => {
      db.all(`
        SELECT c.id, c.name, c.is_group
        FROM chats c
        JOIN chat_members cm ON c.id = cm.chat_id
        WHERE cm.user_id = ?
      `, [req.userId], (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });
    res.json(chatRows.map(c => ({ ...c, is_group: Boolean(c.is_group) })));
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤' });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Å–≤–æ—ë!)
app.delete('/api/messages/:id', auth, async (req, res) => {
  const messageId = req.params.id;
  const userId = req.userId;

  const db = require('./db/database');
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const msg = await new Promise((resolve, reject) => {
      db.get('SELECT user_id FROM messages WHERE id = ?', [messageId], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });

    if (!msg) return res.status(404).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    if (msg.user_id !== userId) return res.status(403).json({ error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å —á—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è' });

    // –£–¥–∞–ª—è–µ–º
    await new Promise((resolve, reject) => {
      db.run('DELETE FROM messages WHERE id = ?', [messageId], (err) => {
        if (err) reject(err);
        else resolve();
      });
    });

    // –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ 'messageDeleted'

    res.json({ success: true });
  } catch (e) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è' });
  }
});

// –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
app.post('/api/messages/image', auth, upload.single('file'), async (req, res) => {
  if (!req.file) {
    return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
  }

  const { chatId, reply_to } = req.body; // –¥–æ–±–∞–≤–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const userId = req.userId;
  const filePath = `/uploads/${req.file.filename}`;

  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const db = require('./db/database');
    const msgId = await new Promise((resolve, reject) => {
      db.run(
        'INSERT INTO messages (chat_id, user_id, text, reply_to) VALUES (?, ?, ?, ?)',
        [chatId, userId, filePath, reply_to || null],
        function (err) {
          if (err) reject(err);
          else resolve(this.lastID);
        }
      );
    });

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const sender = await User.findById(userId);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    let reply_text = null;
    let reply_name = null;
    if (reply_to) {
      const replyMsg = await new Promise((resolve, reject) => {
        db.get(`
          SELECT m.text, u.name 
          FROM messages m
          JOIN users u ON m.user_id = u.id
          WHERE m.id = ?
        `, [reply_to], (err, row) => {
          if (err) reject(err);
          else resolve(row);
        });
      });
      if (replyMsg) {
        reply_text = replyMsg.text;
        reply_name = replyMsg.name;
      }
    }

    // –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const fullMsg = {
      id: msgId,
      chat_id: chatId,
      user_id: userId,
      text: filePath,
      created_at: new Date().toISOString(),
      name: sender.name,
      avatar: sender.avatar,
      reply_to,
      reply_text,
      reply_name
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —á–µ—Ä–µ–∑ WebSocket
    io.to(`chat_${chatId}`).emit('newMessage', fullMsg);

    // üîπ –†–∞—Å—Å—ã–ª–∫–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö (–¥–ª—è –≤—Å–µ—Ö, –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)
    const members = await new Promise((resolve, reject) => {
      db.all('SELECT user_id FROM chat_members WHERE chat_id = ?', [chatId], (err, rows) => {
        if (err) reject(err);
        else resolve(rows.map(r => r.user_id));
      });
    });

    for (const memberId of members) {
      if (memberId !== userId) { // –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        // –ü–æ–ª—É—á–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const count = await new Promise((resolve, reject) => {
          db.get(`
            SELECT COUNT(m.id) AS unread_count
            FROM messages m
            LEFT JOIN user_chat_read_status rcs ON m.chat_id = rcs.chat_id AND rcs.user_id = ?
            WHERE m.chat_id = ? AND (rcs.last_read_message_id IS NULL OR m.id > rcs.last_read_message_id)
          `, [memberId, chatId], (err, row) => {
            if (err) reject(err);
            else resolve(row?.unread_count || 0);
          });
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞
        io.to(`user_${memberId}`).emit('unreadCountUpdated', { chatId, count });
      }
    }

    res.json({ success: true });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' });
  }
});

// –°–æ–æ–±—â–µ–Ω–∏—è
app.get('/api/messages/:chatId', auth, async (req, res) => {
  const messages = await Message.getByChat(req.params.chatId);
  res.json(messages);
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
app.post('/api/messages', auth, async (req, res) => {
  const { chatId, text, reply_to } = req.body;
  const userId = req.userId;

  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const msg = await Message.create({ chat_id: chatId, user_id: userId, text, reply_to });

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const sender = await User.findById(userId);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    let reply_text = null;
    let reply_name = null;
    if (reply_to) {
      const db = require('./db/database');
      const replyMsg = await new Promise((resolve, reject) => {
        db.get(`
          SELECT m.text, u.name 
          FROM messages m
          JOIN users u ON m.user_id = u.id
          WHERE m.id = ?
        `, [reply_to], (err, row) => {
          if (err) reject(err);
          else resolve(row);
        });
      });
      if (replyMsg) {
        reply_text = replyMsg.text;
        reply_name = replyMsg.name;
      }
    }

    // –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const fullMsg = {
      ...msg,
      name: sender.name,
      avatar: sender.avatar,
      user_id: sender.id,
      reply_text,
      reply_name
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —á–µ—Ä–µ–∑ WebSocket
    io.to(`chat_${chatId}`).emit('newMessage', fullMsg);

    // üîπ –†–∞—Å—Å—ã–ª–∫–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö (–¥–ª—è –≤—Å–µ—Ö, –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)
    const db = require('./db/database');
    const members = await new Promise((resolve, reject) => {
      db.all('SELECT user_id FROM chat_members WHERE chat_id = ?', [chatId], (err, rows) => {
        if (err) reject(err);
        else resolve(rows.map(r => r.user_id));
      });
    });

    for (const memberId of members) {
      if (memberId !== userId) { // –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        // –ü–æ–ª—É—á–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const count = await new Promise((resolve, reject) => {
          db.get(`
            SELECT COUNT(m.id) AS unread_count
            FROM messages m
            LEFT JOIN user_chat_read_status rcs ON m.chat_id = rcs.chat_id AND rcs.user_id = ?
            WHERE m.chat_id = ? AND (rcs.last_read_message_id IS NULL OR m.id > rcs.last_read_message_id)
          `, [memberId, chatId], (err, row) => {
            if (err) reject(err);
            else resolve(row?.unread_count || 0);
          });
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞
        io.to(`user_${memberId}`).emit('unreadCountUpdated', { chatId, count });
      }
    }

    res.json(fullMsg);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è' });
  }
});

app.get('/api/users', auth, async (req, res) => {
  const db = require('./db/database');
  try {
    const users = await new Promise((resolve, reject) => {
      db.all('SELECT id, username, name, avatar FROM users WHERE id != ?', [req.userId], (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });
    res.json(users);
  } catch (e) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
  }
});

// –°–æ–∑–¥–∞—Ç—å –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
// –°–æ–∑–¥–∞—Ç—å –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
app.post('/api/chats/private', auth, async (req, res) => {
  const { userId: targetUserId } = req.body;
  const currentUserId = req.userId;

  if (!targetUserId || targetUserId == currentUserId) {
    return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }

  const db = require('./db/database');
  try {
    // –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —á–∞—Ç –º–µ–∂–¥—É –Ω–∏–º–∏
    const existing = await new Promise((resolve, reject) => {
      db.get(`
        SELECT c.id FROM chats c
        JOIN chat_members cm1 ON c.id = cm1.chat_id AND cm1.user_id = ?
        JOIN chat_members cm2 ON c.id = cm2.chat_id AND cm2.user_id = ?
        WHERE c.is_group = 0
      `, [currentUserId, targetUserId], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });

    if (existing) {
      return res.json({ id: existing.id, name: '–õ–∏—á–Ω—ã–π —á–∞—Ç', is_group: false });
    }

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —á–∞—Ç
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    const targetUser = await User.findById(targetUserId);
    const chatName = targetUser ? `${targetUser.name || targetUser.username}` : `–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${targetUserId}`;
    const chatId = await new Promise((resolve, reject) => {
      db.run('INSERT INTO chats (name, is_group) VALUES (?, 0)', [chatName], function (err) {
        if (err) reject(err);
        else resolve(this.lastID);
      });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    await new Promise((resolve, reject) => {
      db.run('INSERT INTO chat_members (chat_id, user_id) VALUES (?, ?)', [chatId, currentUserId], (err) => {
        if (err) reject(err);
        else resolve();
      });
    });
    await new Promise((resolve, reject) => {
      db.run('INSERT INTO chat_members (chat_id, user_id) VALUES (?, ?)', [chatId, targetUserId], (err) => {
        if (err) reject(err);
        else resolve();
      });
    });

    // üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Å –∫–æ—Ç–æ—Ä—ã–º —Å–æ–∑–¥–∞–ª–∏ —á–∞—Ç
    io.to(`user_${targetUserId}`).emit('newChatCreated', {
      id: chatId,
      name: chatName,
      is_group: false
    });

    res.json({ id: chatId, name: chatName, is_group: false });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞' });
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)
app.get('/api/settings', auth, (req, res) => {
  res.json({ theme: 'light', notifications: true });
});

// –û–±—Å–ª—É–∂–∏–≤–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
app.get('/*path', (req, res) => {
  res.sendFile(path.join(__dirname, '../frontend/index.html'));
});

// –ü–æ–ª—É—á–∏—Ç—å –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/users/:id/online', auth, async (req, res) => {
  try {
    const isOnline = await User.isOnline(req.params.id);
    res.json({ online: isOnline });
  } catch (e) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞' });
  }
});

// WebSocket
io.use((socket, next) => {
  const token = socket.handshake.auth.token;
  if (!token) return next(new Error('–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'));
  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    socket.userId = decoded.id;
    next();
  } catch (e) {
    next(new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω'));
  }
});

io.on('connection', (socket) => {
  console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á—ë–Ω:', socket.userId);

  User.setOnline(socket.userId);

  socket.join(`user_${socket.userId}`);

  socket.on('joinChat', (chatId) => {
    socket.join(`chat_${chatId}`);
  });

  socket.on('disconnect', () => {
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á—ë–Ω:', socket.userId);
  });
  
  socket.on('typing', (data) => {
  const { chatId, typing } = data;
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—Å–µ–º –≤ —á–∞—Ç–µ, –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
  socket.to(`chat_${chatId}`).emit('typing', {
    userId: socket.userId,
    typing
  });
});
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});