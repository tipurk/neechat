// frontend/script.js

let currentChatId = null;
let socket = null;
const API_BASE = 'http://localhost:3000/api';
const WS_URL = 'http://localhost:3000';

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const loginScreen = document.getElementById('loginScreen');
const appScreen = document.getElementById('appScreen');
const profileHeader = document.getElementById('profileHeader');
const chatList = document.getElementById('chatList');
const chatHeader = document.getElementById('chatHeader');
const messagesContainer = document.getElementById('messages');
const messageInput = document.getElementById('messageInput');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
  const token = localStorage.getItem('token');
  if (token) {
    initApp(token);
  } else {
    showLogin();
  }
});

// ========== –≠–ö–†–ê–ù –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ==========
function showLogin() {
  loginScreen.style.display = 'flex';
  appScreen.style.display = 'none';
}

function showApp() {
  loginScreen.style.display = 'none';
  appScreen.style.display = 'flex';
}

async function handleLogin() {
  const username = document.getElementById('loginUsername').value;
  const password = document.getElementById('loginPassword').value;
  try {
    const res = await fetch(`${API_BASE}/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username, password })
    });
    const data = await res.json();
    if (res.ok) {
      localStorage.setItem('token', data.token);
      localStorage.setItem('user', JSON.stringify(data.user));
      initApp(data.token);
    } else {
      alert('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  } catch (e) {
    alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
  }
}

async function handleRegister() {
  const username = document.getElementById('regUsername').value;
  const password = document.getElementById('regPassword').value;
  const name = document.getElementById('regName').value;
  try {
    const res = await fetch(`${API_BASE}/register`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username, password, name })
    });
    const data = await res.json();
    if (res.ok) {
      localStorage.setItem('token', data.token);
      localStorage.setItem('user', JSON.stringify(data.user));
      initApp(data.token);
    } else {
      alert('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  } catch (e) {
    alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
  }
}

function showNotification(msg) {
  if (Notification.permission !== "granted") return;

  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –±—ç–∫–∞)
  const title = msg.name || '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';
  const text = msg.text.length > 50 ? msg.text.slice(0, 50) + '...' : msg.text;

  new Notification(title, {
    body: text,
    icon: msg.avatar?.startsWith('http') ? msg.avatar : null
  });
}

// ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==========
async function initApp(token) {
  showApp();
  loadProfile();
  loadChats();
  updateChatView(); 
  const savedTheme = localStorage.getItem('theme') || 'light';
applyTheme(savedTheme);
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
if ("Notification" in window && Notification.permission === "default") {
  Notification.requestPermission();
}


  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket
  socket = io(WS_URL, {
    auth: { token }
  });

  socket.on('connect', () => {
    console.log('WebSocket –ø–æ–¥–∫–ª—é—á—ë–Ω');
  });

socket.on('newMessage', (msg) => {
  // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  if (msg.chat_id != currentChatId) {
    showNotification(msg);
  }
  // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤ DOM (–µ—Å–ª–∏ —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç –ø–æ–∑–∂–µ)
  if (msg.chat_id == currentChatId) {
    addMessageToUI(msg);
  } else {
    markChatAsUnread(msg.chat_id);
  }
});

socket.on('typing', (data) => {
  if (!currentChatId || data.chatId != currentChatId) return;

  const currentUser = JSON.parse(localStorage.getItem('user') || '{}');
  if (data.userId == currentUser.id) return; // —ç—Ç–æ –≤—ã ‚Äî –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º

  const indicator = document.getElementById('typingIndicator');
  if (indicator) {
    indicator.style.display = data.typing ? 'block' : 'none';
  }
});


  socket.on('connect_error', (err) => {
    console.error('WebSocket –æ—à–∏–±–∫–∞:', err.message);
  });

}

// ========== –ü–†–û–§–ò–õ–¨ ==========
async function loadProfile() {
  try {
    const token = localStorage.getItem('token');
    const res = await fetch(`${API_BASE}/profile`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    const profile = await res.json();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const user = JSON.parse(localStorage.getItem('user') || '{}');
    const updatedUser = { ...user, name: profile.name, avatar: profile.avatar };
    localStorage.setItem('user', JSON.stringify(updatedUser));

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä
    const avatarEl = document.createElement('span');
    const avatarText = profile.avatar.trim();
    if (avatarText.startsWith('http')) {
      avatarEl.innerHTML = `<img src="${escapeHtml(avatarText)}" alt="avatar" class="avatar-img">`;
    } else {
      avatarEl.textContent = avatarText || 'üë§';
    }
    profileHeader.innerHTML = '';
    profileHeader.appendChild(avatarEl);
    profileHeader.insertAdjacentText('beforeend', ' ' + profile.name);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
  }
}

async function saveProfile() {
  const name = document.getElementById('profileName').value.trim();
  const avatar = document.getElementById('profileAvatar').value.trim() || 'üë§';
  if (!name) return alert('–£–∫–∞–∂–∏—Ç–µ –∏–º—è');

  const token = localStorage.getItem('token');
  try {
    const res = await fetch(`${API_BASE}/profile`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`
      },
      body: JSON.stringify({ name, avatar })
    });
    if (res.ok) {
      loadProfile();
      closeModal('profileModal');
    } else {
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å');
    }
  } catch (e) {
    alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
  }
}

// ========== –ß–ê–¢–´ ==========
async function loadChats() {
  const token = localStorage.getItem('token');
  try {
    const res = await fetch(`${API_BASE}/chats`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    const chats = await res.json();
    chatList.innerHTML = '';

    for (const chat of chats) {
      let displayName = chat.name;

      // –ï—Å–ª–∏ —á–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
      if (!chat.is_group) {
        // –ó–∞–ø—Ä–æ—Å–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        const membersRes = await fetch(`${API_BASE}/chats/${chat.id}/members`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        const members = await membersRes.json();
        const other = members.find(m => m.id != JSON.parse(localStorage.getItem('user')).id);
        if (other) {
          displayName = other.name || other.username;
        }
      }

      const el = document.createElement('div');
      el.className = 'chat-item';
      el.innerHTML = `<strong>${escapeHtml(displayName)}</strong><br><small>${chat.lastMsg || ''}</small>`;
      el.onclick = () => openChat(chat.id, displayName);
      chatList.appendChild(el);
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤', e);
  }
}
async function openNewChatModal() {
  const token = localStorage.getItem('token');
  try {
    const res = await fetch(`${API_BASE}/users`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    const users = await res.json();
    const list = document.getElementById('usersList');
    list.innerHTML = '';

    if (users.length === 0) {
      list.innerHTML = '<p>–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>';
    } else {
      users.forEach(user => {
        const el = document.createElement('div');
        el.className = 'chat-item';
        el.style.cursor = 'pointer';
        el.innerHTML = `<strong>${user.name || user.username}</strong>`;
        el.onclick = () => createPrivateChat(user.id, user.name || user.username);
        list.appendChild(el);
      });
    }

    document.getElementById('newChatModal').classList.add('active');
  } catch (e) {
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  }
}

async function createPrivateChat(userId, name) {
  const token = localStorage.getItem('token');
  try {
    const res = await fetch(`${API_BASE}/chats/private`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`
      },
      body: JSON.stringify({ userId })
    });
    if (res.ok) {
      closeModal('newChatModal');
      loadChats(); // –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
      // –ú–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç:
      // const chat = await res.json();
      // openChat(chat.id, `–ß–∞—Ç —Å ${name}`);
    } else {
      const err = await res.json();
      alert('–û—à–∏–±–∫–∞: ' + (err.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç'));
    }
  } catch (e) {
    alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
  }
}

let pendingFile = null; // –≤—Ä–µ–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª

function handleFileSelect(e) {
  const file = e.target.files[0];
  if (!file) return;

  if (!file.type.startsWith('image/')) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (jpg, png, gif –∏ —Ç.–¥.)');
    return;
  }

  pendingFile = file;
  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é
  const input = document.getElementById('messageInput');
  input.placeholder = `üì∑ ${file.name} (–Ω–∞–∂–º–∏—Ç–µ –û—Ç–ø—Ä–∞–≤–∏—Ç—å)`;
  input.value = ''; // –æ—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
}

async function sendMessage() {
  const text = messageInput.value.trim();
  if (!currentChatId) return;

  const token = localStorage.getItem('token');

  if (pendingFile) {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const formData = new FormData();
    formData.append('chatId', currentChatId);
    formData.append('file', pendingFile);

    try {
      const res = await fetch(`${API_BASE}/messages/image`, {
        method: 'POST',
        headers: { Authorization: `Bearer ${token}` },
        body: formData
      });
      if (res.ok) {
        resetFileInput();
        loadMessages(currentChatId); // –æ–±–Ω–æ–≤–∏—Ç—å —á–∞—Ç
      } else {
        const err = await res.json();
        alert('–û—à–∏–±–∫–∞: ' + (err.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'));
      }
    } catch (e) {
      alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    }
  } else if (text) {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
    try {
      const res = await fetch(`${API_BASE}/messages`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`
        },
        body: JSON.stringify({ chatId: currentChatId, text })
      });
      if (res.ok) {
        messageInput.value = '';
      }
    } catch (e) {
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
    }
  }
}

function resetFileInput() {
  pendingFile = null;
  document.getElementById('fileInput').value = '';
  document.getElementById('messageInput').placeholder = '–°–æ–æ–±—â–µ–Ω–∏–µ...';
}

async function deleteChat(chatId) {
  if (!confirm('–£–¥–∞–ª–∏—Ç—å —á–∞—Ç? –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.')) return;

  const token = localStorage.getItem('token');
  try {
    const res = await fetch(`${API_BASE}/chats/${chatId}`, {
      method: 'DELETE',
      headers: { Authorization: `Bearer ${token}` }
    });
    if (res.ok) {
      currentChatId = null;
      updateChatView();
      loadChats(); // –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
    } else {
      const err = await res.json();
      alert('–û—à–∏–±–∫–∞: ' + (err.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∞—Ç'));
    }
  } catch (e) {
    alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
  }
}

function markChatAsUnread(chatId) {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ‚Äî –æ–±–Ω–æ–≤–ª—è–ª–∏ –±—ã —Å—á—ë—Ç—á–∏–∫
  // –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏–∫–∞ –∑–∞–≥–æ—Ç–æ–≤–∫–∏
}

let typingTimeout = null;

document.getElementById('messageInput').addEventListener('input', () => {
  if (!currentChatId || !socket) return;
  
  const currentUser = JSON.parse(localStorage.getItem('user') || '{}');
  socket.emit('typing', { 
    chatId: currentChatId, 
    typing: true,
    userId: currentUser.id 
  });

  clearTimeout(typingTimeout);
  typingTimeout = setTimeout(() => {
    socket.emit('typing', { 
      chatId: currentChatId, 
      typing: false,
      userId: currentUser.id 
    });
  }, 3000);
});

function updateChatView() {
  const hasChat = !!currentChatId;
  document.querySelector('.messages').style.display = hasChat ? 'flex' : 'none';
  document.querySelector('.input-area').style.display = hasChat ? 'flex' : 'none';
  document.querySelector('.main').classList.toggle('has-chat', hasChat);
  document.getElementById('chatHeader').innerText = hasChat ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : 'Nee-chat';
}

// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —á–∞—Ç–∞
async function openChat(chatId, fallbackName) {
  currentChatId = chatId;
  updateChatView();
  document.getElementById('typingIndicator').style.display = 'none';
  // üîπ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ "–û–±—â–µ–≥–æ —á–∞—Ç–∞"
  if (fallbackName === '–û–±—â–∏–π —á–∞—Ç') {
    chatHeader.innerHTML = `<span class="chat-header-name">–û–±—â–∏–π —á–∞—Ç</span>`;
    messagesContainer.innerHTML = '';
    await loadMessages(chatId);
    if (socket && socket.connected) {
      socket.emit('joinChat', chatId);
    }
    return;
  }

  // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
  const token = localStorage.getItem('token');
  try {
    const membersRes = await fetch(`${API_BASE}/chats/${chatId}/members`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    const members = await membersRes.json();
    const currentUser = JSON.parse(localStorage.getItem('user') || '{}');
    const other = members.find(m => m.id != currentUser.id);

    let displayName = fallbackName;
    let avatarHtml = '';
    let deleteBtnHtml = '';


    if (other) {
      avatarHtml = `
        <div class="avatar-with-status">
          ${other.avatar && other.avatar.startsWith('http')
            ? `<img src="${other.avatar}" class="chat-header-avatar" onerror="this.style.display='none'">`
            : `<span class="chat-header-avatar-text">${other.avatar || 'üë§'}</span>`
          }
          <span class="online-status"></span>
        </div>
      `;
    }


    chatHeader.innerHTML = `
      ${avatarHtml}
      <span class="chat-header-name">${escapeHtml(displayName)}</span>
      ${deleteBtnHtml}
    `;
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–ª–æ–∂–µ–Ω–∏–π –ü–û–°–õ–ï —É—Å—Ç–∞–Ω–æ–≤–∫–∏ innerHTML
    const attachmentsBtn = document.createElement('button');
    attachmentsBtn.className = 'attachments-btn';
    attachmentsBtn.title = '–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã';
    attachmentsBtn.innerHTML = 'üñºÔ∏è';
    attachmentsBtn.onclick = () => openAttachmentsModal(chatId);
    chatHeader.appendChild(attachmentsBtn);

    // –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    checkOnlineStatus(other.id).then(isOnline => {
      const statusEl = chatHeader.querySelector('.online-status');
      if (statusEl) {
        statusEl.className = `online-status ${isOnline ? 'online' : ''}`;
      }
    });
  } catch (e) {
    chatHeader.innerHTML = `<span>${escapeHtml(fallbackName)}</span>`;
  }

  messagesContainer.innerHTML = '';
  await loadMessages(chatId);

  if (socket && socket.connected) {
    socket.emit('joinChat', chatId);
  }
}

async function checkOnlineStatus(userId) {
  const token = localStorage.getItem('token');
  try {
    const res = await fetch(`${API_BASE}/users/${userId}/online`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    const data = await res.json();
    return data.online;
  } catch (e) {
    return false;
  }
}

async function openAttachmentsModal(chatId) {
  const token = localStorage.getItem('token');
  try {
    const res = await fetch(`${API_BASE}/messages/${chatId}`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    const messages = await res.json();
    const images = messages.filter(msg => msg.text.startsWith('/uploads/'));

    const grid = document.getElementById('attachmentsGrid');
    grid.innerHTML = '';

    if (images.length === 0) {
      grid.innerHTML = '<p>–ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤</p>';
    } else {
      images.forEach(msg => {
        const img = document.createElement('img');
        img.src = `http://localhost:3000${msg.text}`;
        img.onclick = () => {
          // –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ —á–∞—Ç–µ
          const fakeImg = {
            dataset: {
              fullsize: `http://localhost:3000${msg.text}`,
              sender: msg.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
              timestamp: msg.created_at
            }
          };
          openImageModal(fakeImg);
          closeModal('attachmentsModal');
        };
        grid.appendChild(img);
      });
    }

    document.getElementById('attachmentsModal').classList.add('active');
  } catch (e) {
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è');
  }
}

async function loadMessages(chatId) {
  const token = localStorage.getItem('token');
  try {
    const res = await fetch(`${API_BASE}/messages/${chatId}`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    const messages = await res.json();
    messagesContainer.innerHTML = '';
    messages.forEach(addMessageToUI);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
  }
}

async function deleteMessage(messageId) {
  if (!confirm('–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?')) return;

  const token = localStorage.getItem('token');
  try {
    const res = await fetch(`${API_BASE}/messages/${messageId}`, {
      method: 'DELETE',
      headers: { Authorization: `Bearer ${token}` }
    });
    if (res.ok) {
      // –£–¥–∞–ª—è–µ–º –∏–∑ DOM
      const msgEl = document.querySelector(`.message[data-message-id="${messageId}"]`);
      if (msgEl) msgEl.remove();
    } else {
      const data = await res.json();
      alert('–û—à–∏–±–∫–∞: ' + (data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å'));
    }
  } catch (e) {
    alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
  }
}

function addMessageToUI(msg) {
  const currentUser = JSON.parse(localStorage.getItem('user') || '{}');
  const isOwn = msg.user_id == currentUser.id;

  const el = document.createElement('div');
  el.className = `message ${isOwn ? 'out' : 'in'}`;
  el.setAttribute('data-message-id', msg.id);

  const isImage = msg.text.startsWith('/uploads/');

  // üîπ –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –∏ –∞–≤–∞—Ç–∞—Ä–∫—É –¥–ª—è —á—É–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
  let authorHtml = '';
  let avatarHtml = '';

  if (!isOwn) {
    authorHtml = `<div class="message-author">${escapeHtml(msg.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}</div>`;
    const avatar = msg.avatar || 'üë§';
    if (avatar.startsWith('http')) {
      avatarHtml = `<img src="${avatar}" class="message-avatar" onerror="this.style.display='none'">`;
    } else {
      avatarHtml = `<div class="message-avatar-text">${escapeHtml(avatar)}</div>`;
    }
  }

  let contentHtml = '';
  if (isImage) {
    const imgUrl = `http://localhost:3000${msg.text}`;
    // üîπ –î–æ–±–∞–≤–ª—è–µ–º data-url –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –º–æ–¥–∞–ª–∫–µ
    contentHtml = `<img src="${imgUrl}" class="message-image" data-fullsize="${imgUrl}" onclick="openImageModal('${imgUrl}')">`;
  } else {
    contentHtml = `<div class="msg-text">${escapeHtml(msg.text)}</div>`;
  }

  let deleteBtn = '';
  if (isOwn) {
    deleteBtn = `<button class="delete-btn" onclick="deleteMessage(${msg.id})">√ó</button>`;
  }

  if (isImage) {
  const imgUrl = `http://localhost:3000${msg.text}`;
  const timestamp = msg.created_at; // ISO-—Å—Ç—Ä–æ–∫–∞
  const senderName = msg.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  contentHtml = `
    <img 
      src="${imgUrl}" 
      class="message-image" 
      data-fullsize="${imgUrl}"
      data-sender="${escapeHtml(senderName)}"
      data-timestamp="${timestamp}"
      onclick="openImageModal(this)"
    >
  `;
}

  const time = new Date(msg.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

  el.innerHTML = `
    ${avatarHtml}
    <div class="msg-bubble">
      ${authorHtml}
      ${contentHtml}
      ${isImage ? '' : `<small class="msg-time">${time}</small>`}
    </div>
    ${deleteBtn}
  `;

  messagesContainer.appendChild(el);
  messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

function showPrevImage(e) {
  e.stopPropagation();
  if (window.currentImageIndex > 0) {
    window.currentImageIndex--;
    const imgData = window.chatImages[window.currentImageIndex];
    document.getElementById('fullImage').src = imgData.url;
    document.getElementById('imageInfo').innerText = `${imgData.sender}, ${imgData.timestamp}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å—Ç—Ä–µ–ª–æ–∫
    document.getElementById('modalPrevBtn').style.display = window.currentImageIndex > 0 ? 'flex' : 'none';
    document.getElementById('modalNextBtn').style.display = 'flex';
  }
}

function showNextImage(e) {
  e.stopPropagation();
  if (window.currentImageIndex < window.chatImages.length - 1) {
    window.currentImageIndex++;
    const imgData = window.chatImages[window.currentImageIndex];
    document.getElementById('fullImage').src = imgData.url;
    document.getElementById('imageInfo').innerText = `${imgData.sender}, ${imgData.timestamp}`;
    
    document.getElementById('modalNextBtn').style.display = window.currentImageIndex < window.chatImages.length - 1 ? 'flex' : 'none';
    document.getElementById('modalPrevBtn').style.display = 'flex';
  }
}

function openImageModal(imgElement) {
  const url = imgElement.dataset.fullsize;
  const sender = imgElement.dataset.sender;
  const timestamp = new Date(imgElement.dataset.timestamp).toLocaleString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ
const images = Array.from(document.querySelectorAll('.message-image'))
  .map(img => ({
    url: img.dataset.fullsize,
    sender: img.dataset.sender || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    timestamp: new Date(img.dataset.timestamp).toLocaleString('ru-RU', {
      day: '2-digit', month: '2-digit', year: 'numeric',
      hour: '2-digit', minute: '2-digit'
    })
  }));

  const currentIndex = images.findIndex(i => i.url === url);
  window.currentImageIndex = currentIndex;
  window.chatImages = images;

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  document.getElementById('fullImage').src = url;
  document.getElementById('imageInfo').innerText = `${sender}, ${timestamp}`;

  document.getElementById('imageModal').classList.add('active');
  document.body.style.overflow = 'hidden';

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫–∏
  document.getElementById('modalPrevBtn').style.display = currentIndex > 0 ? 'flex' : 'none';
  document.getElementById('modalNextBtn').style.display = currentIndex < images.length - 1 ? 'flex' : 'none';
}

function closeImageModal() {
  document.getElementById('imageModal').classList.remove('active');
  document.body.style.overflow = ''; // –≤–µ—Ä–Ω—É—Ç—å —Å–∫—Ä–æ–ª–ª
}

// ========== –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø ==========
async function sendMessage() {
  const text = messageInput.value.trim();
  if (!currentChatId) return;

  const token = localStorage.getItem('token');

  // üî∏ –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª?
  if (pendingFile) {
    const formData = new FormData();
    formData.append('chatId', currentChatId);
    formData.append('file', pendingFile);
    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å
    // if (text) formData.append('caption', text);

    try {
      const res = await fetch(`${API_BASE}/messages/image`, {
        method: 'POST',
        headers: { Authorization: `Bearer ${token}` },
        body: formData
      });
      if (res.ok) {
        resetFileInput();
        messageInput.value = ''; // –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ
        loadMessages(currentChatId);
      } else {
        const err = await res.json();
        alert('–û—à–∏–±–∫–∞: ' + (err.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'));
      }
    } catch (e) {
      alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    }
    return; // üî¥ –í–ê–ñ–ù–û: –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç
  }

  // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
  if (text) {
    try {
      const res = await fetch(`${API_BASE}/messages`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`
        },
        body: JSON.stringify({ chatId: currentChatId, text })
      });
      if (res.ok) {
        messageInput.value = '';
      }
    } catch (e) {
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
    }
  }
}

// –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
document.addEventListener('keydown', (e) => {
  const isInputFocused = document.activeElement === messageInput;

  // Ctrl + Enter ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞
  if (isInputFocused && e.ctrlKey && e.key === 'Enter') {
    e.preventDefault();
    sendMessage();
    return;
  }

  // Enter ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö / –±–µ–∑ Ctrl)
  if (isInputFocused && e.key === 'Enter' && !e.shiftKey) {
    e.preventDefault();
    sendMessage();
    return;
  }

  // Esc ‚Äî –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫–∏
  if (e.key === 'Escape') {
    // –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (document.getElementById('imageModal').classList.contains('active')) {
      closeImageModal();
      return;
    }
    // –ó–∞–∫—Ä—ã—Ç—å –¥—Ä—É–≥–∏–µ –º–æ–¥–∞–ª–∫–∏
    const modals = ['profileModal', 'settingsModal', 'newChatModal', 'attachmentsModal'];
    for (const id of modals) {
      const modal = document.getElementById(id);
      if (modal && modal.classList.contains('active')) {
        closeModal(id);
        return;
      }
    }
  }
});

function openProfileModal() {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  document.getElementById('profileName').value = user.name || '';
  document.getElementById('profileAvatar').value = user.avatar || 'üë§';
  document.getElementById('profileModal').classList.add('active');
}

function applyTheme(theme) {
  document.body.classList.toggle('dark-theme', theme === 'dark');
}

// ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
function openSettings() {
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∏–∑ localStorage –∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∞)
  const notif = localStorage.getItem('notifications') !== 'false';
  const theme = localStorage.getItem('theme') || 'light';
  document.getElementById('notifCheck').checked = notif;
  document.getElementById('themeSelect').value = theme;
  document.getElementById('settingsModal').classList.add('active');
}
function saveSettings() {
  const notifications = document.getElementById('notifCheck').checked;
  const theme = document.getElementById('themeSelect').value;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
  localStorage.setItem('notifications', notifications);
  localStorage.setItem('theme', theme);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
  applyTheme(theme);

  closeModal('settingsModal');
}

function showRegisterForm() {
  document.querySelector('.auth-form').style.display = 'none';
  document.getElementById('registerForm').style.display = 'block';
}

function showLoginForm() {
  document.getElementById('registerForm').style.display = 'none';
  document.querySelector('.auth-form').style.display = 'block';
}

// ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ==========
function escapeHtml(text) {
  const map = {
    '&': '&amp;',
    '<': '<',
    '>': '>',
    '"': '&quot;',
    "'": '&#039;'
  };
  return text.replace(/[&<>"']/g, m => map[m]);
}

function closeModal(id) {
  document.getElementById(id).classList.remove('active');
}

// –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
function logout() {
  localStorage.removeItem('token');
  localStorage.removeItem('user');
  showLogin();
  if (socket) socket.disconnect();
  currentChatId = null;
}